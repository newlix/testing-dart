package main

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"path"
	"path/filepath"
	"regexp"
	"strings"
)

var template = `// generated by github.com/newlix/testingdart
// go get github.com/dnephin/filewatcher
// filewatcher -x . testingdart
import 'package:testing/testing.dart' as testing;
%s

Future<bool> pass({bool verbose}) async {
  testing.verbose = verbose;

  testing.start();

%s
  testing.end();

  return testing.pass;
}
`

func main() {
	wd, err := os.Getwd()
	if err != nil {
		log.Fatal(err)
	}

	root := path.Join(wd, "lib")
	r, err := regexp.Compile("^(test.+)[(]")
	if err != nil {
		log.Fatal(err)
	}
	imports := ""
	tests := ""
	process := func(p string, info os.FileInfo, err error) error {
		if info.IsDir() {
			return nil
		}
		if !strings.HasSuffix(p, "_test.dart") {
			return nil
		}
		fmt.Printf("scan: %s\n", p)
		s := strings.TrimPrefix(p, root)
		s = strings.TrimPrefix(s, "/")
		importPath := s
		s = strings.TrimSuffix(s, "_test.dart")
		s = strings.Replace(s, "/", "_", -1)
		packageName := "_" + s //avoid name collision

		f, err := os.Open(p)
		if err != nil {
			log.Fatal(err)
		}
		defer f.Close()
		ts := ""
		scanner := bufio.NewScanner(f)
		for scanner.Scan() {
			s := scanner.Text()

			gs := r.FindStringSubmatch(s)
			if len(gs) > 1 {
				testname := gs[1]
				ts += fmt.Sprintf("  await testing.run('%s', %s.%s);\n", testname, packageName, testname)
			}
		}
		if err := scanner.Err(); err != nil {
			log.Fatal(err)
		}
		if len(ts) > 0 {
			tests += ts
			imports += fmt.Sprintf("import '%s' as %s;\n", importPath, packageName)
		}
		return nil
	}
	filepath.Walk(root, process)
	p := path.Join(root, "tests.dart")
	f, err := os.Create(p)
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()
	if _, err := fmt.Fprintf(f, template, imports, tests); err != nil {
		log.Fatal(err)
	}
	fmt.Printf("gen : %s\n", p)
}
